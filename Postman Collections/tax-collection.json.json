{
	"info": {
		"_postman_id": "e62d954f-6de4-46d6-b485-165c83fa91c2",
		"name": "far-acrs-tax-adapter",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Tax- Single",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b927489-2180-43ea-9088-bd625d9f43ba",
						"exec": [
							"var request = JSON.parse(pm.request.body.raw);\r",
							"let testVarStr = pm.collectionVariables.get(\"feeTypeInfoMappingVar\");\r",
							"const feeTypeInfoDB = JSON.parse(testVarStr).codes;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Action match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.action).eql(request.data.actionEnum);\r",
							"});\r",
							"\r",
							"pm.test(\"Property Chain code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyChain.code).eql(request.meta.chainCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Property code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyCode.code).eql(request.meta.propertyCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax length match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails.length).eql(request.data.taxes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax includedInd match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].includedInd).eql(request.data.taxes[0].isInclusive);\r",
							"});\r",
							"\r",
							"pm.test(\"feeInd flag match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //loop through feeTypeInfoMap static data and identify the taxtype\r",
							"    for(let i=0; i< feeTypeInfoDB.length; i++){\r",
							"        if(feeTypeInfoDB[i].acrs == request.data.taxes[0].taxType){\r",
							"            pm.expect(jsonData.taxDetails[0].feeInd+\"\").eql(feeTypeInfoDB[i].mmf);\r",
							"            console.log(\"Found fee type  \"+JSON.stringify(feeTypeInfoDB[i]));\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Tax name match and id present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].name).eql(request.data.taxes[0].name);\r",
							"    pm.expect(jsonData.taxDetails[0].id).is.eql(\"TAX001\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Number of longDescription match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].longDescription[0].text[0].length).eql(request.data.taxes[0].longDescription.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax paymentAtHotelStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].paymentAtHotelStatusEnum).eql(request.data.taxes[0].paymentAtHotelStatus);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Tax ActivationStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].activationStatusEnum).eql(request.data.taxes[0].activationStatus);\r",
							"});\r",
							"\r",
							"// pm.test(\"Tax ChargeFrequency match\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.taxDetails[0].chargeFrequencyEnum).eql(request.data.taxes[0].chargeFrequency);\r",
							"// });\r",
							"\r",
							"pm.test(\"Tax computationType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationTypeEnum).eql(request.data.taxes[0].computationType);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax computationMode match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationModeEnum).eql(request.data.taxes[0].computationMode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Residency Status match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].residencyEnum).eql(request.data.taxes[0].residencyStatus);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax relatedTaxCodes match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].relatedTaxCodes.length).eql(request.data.taxes[0].relatedTaxCodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of Periods  match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods.length).eql(request.data.taxes[0].periods.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Start Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.start).eql(request.data.taxes[0].periods[0].startDate);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax End Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.end).eql(request.data.taxes[0].periods[0].endDate);\r",
							"});\r",
							"\r",
							"pm.test(\"ActiveDow match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const requestDOW = request.data.taxes[0].periods[0].activeDow;\r",
							"    for (const property in requestDOW) {\r",
							"         if(requestDOW[property]){\r",
							"            console.log(`${property}: ${requestDOW[property]}`);\r",
							"             //Check if this particular DOW is present in response body\r",
							"             const indexNum = jsonData.taxDetails[0].periods[0].dowEnum.findIndex( item => item.toLowerCase()) === (property.toLowerCase());\r",
							"             pm.expect(indexNum).not.eql(-1);\r",
							"         }\r",
							"\r",
							"    }\r",
							"    console.log(jsonData.taxDetails[0].periods[0].dowEnum.length);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].dowEnum.length).eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of ratePeriods match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"});\r",
							"\r",
							"pm.test(\"RatePeriod details match\", function () {\r",
							"    var respJson = pm.response.json();\r",
							"    /*To comapare flatAmount fied of ACRS request - \r",
							"        1) Check if '.' is present (decimal point).\r",
							"        2) Split the string at decimal point.\r",
							"    */\r",
							"    const respAmtValue = request.data.taxes[0].periods[0].ratePeriods[0].flatAmount;\r",
							"    const numSplitArr = respAmtValue.split(\".\");\r",
							"    pm.expect(numSplitArr.length).to.be.at.most(2); //number & fraction\r",
							"    //check if fraction part is present\r",
							"    let tmpNumConcat=\"\";\r",
							"    tmpNumConcat+=numSplitArr[0];\r",
							"    if(numSplitArr.length === 2){\r",
							"        const fraction = numSplitArr[1];\r",
							"        console.log(fraction);\r",
							"             pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.numberOfDecimals).eql(fraction.length);\r",
							"        tmpNumConcat+=fraction;\r",
							"    }\r",
							"    console.log(tmpNumConcat);\r",
							"     pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.value).eql(parseInt(tmpNumConcat));\r",
							"\r",
							"    //Compare currency code\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.currencyCode).eql(request.data.taxes[0].currency);\r",
							"    \r",
							"     //Convert MMF string percentValue to Double to compare with ACRS value\r",
							"     const respPercentVal = parseFloat(respJson.taxDetails[0].periods[0].values[0].percentValue);\r",
							"     pm.expect(respPercentVal).eql(request.data.taxes[0].periods[0].ratePeriods[0].percentage);\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"\r",
							"    //Validate pricerange\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].price.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"    //Validate pricerange.min and max\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].price[0].min).eql(request.data.taxes[0].periods[0].ratePeriods[0].priceRange[0].min);\r",
							"     pm.expect(respJson.taxDetails[0].periods[0].values[0].price[0].max).eql(request.data.taxes[0].periods[0].ratePeriods[0].priceRange[0].max);\r",
							"\r",
							"    //Validate age\r",
							"    pm.expect(parseInt(respJson.taxDetails[0].periods[0].values[0].age.min)).eql(request.data.taxes[0].periods[0].ratePeriods[0].age.min);\r",
							"     pm.expect(parseInt(respJson.taxDetails[0].periods[0].values[0].age.max)).eql(request.data.taxes[0].periods[0].ratePeriods[0].age.max);\r",
							"});\r",
							"\r",
							"pm.test(\"type of guest match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values[0].guestTypes[0].length).eql(request.data.taxes[0].periods[0].ratePeriods[0].guestTypes[0].length);\r",
							"});\r",
							"\r",
							"pm.test(\"Product Category match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].productCategory).eql(request.data.taxes[0].productCategories[0].productCategoryCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codeType).eql(request.data.taxes[0].productCategories[0].codeType);\r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codes[0].length).eql(request.data.taxes[0].productCategories[0].productCodes[0].length);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c2e6c661-61bf-446f-be9f-c8be188d8fc9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ama-Api-Version",
						"value": "1",
						"type": "default"
					},
					{
						"key": "Ama-Request-Id",
						"value": "1234",
						"type": "default"
					},
					{
						"key": "Ama-RequestCorrelation-Id",
						"value": "A1234",
						"type": "default"
					},
					{
						"key": "Ama-Correlation-Id",
						"value": "ABC12345",
						"type": "default"
					},
					{
						"key": "Ama-Retry-Count",
						"value": "0",
						"type": "default"
					},
					{
						"key": "Ama-Sequence-Id",
						"value": "1",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meta\": {\r\n    \"generationTime\": \"2023-05-19T05:33:28.085Z\",\r\n    \"chainCode\": \"MI\",\r\n    \"propertyCode\": \"NYCMQ\"\r\n  },\r\n  \"data\": {\r\n    \"taxes\": [\r\n      {\r\n        \"taxType\": 18,\r\n        \"isInclusive\": true,\r\n        \"name\": \"City Tourism tax\",\r\n        \"description\": \"some descritpion- example for demo - one\",\r\n        \"longDescription\": \"some long description\",\r\n        \"taxUserCode\": \"AN001\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2023-06-19\",\r\n            \"endDate\": \"2023-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": true,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"100.55\",\r\n                \"percentage\": 0,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.00\",\r\n                    \"max\": \"50.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 18,\r\n                  \"max\": 60\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE\"\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"action\": \"Update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ATAX_URL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "Tax- Multiple Taxes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var request = JSON.parse(pm.request.body.raw);\r",
							"let testVarStr = pm.collectionVariables.get(\"feeTypeInfoMappingVar\");\r",
							"const feeTypeInfoDB = JSON.parse(testVarStr).codes;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Action match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.action).eql(request.data.actionEnum);\r",
							"});\r",
							"\r",
							"pm.test(\"Property Chain code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyChain.code).eql(request.meta.chainCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Property code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyCode.code).eql(request.meta.propertyCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax length match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails.length).eql(request.data.taxes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax includedInd match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].includedInd).eql(request.data.taxes[0].isInclusive);\r",
							"        pm.expect(jsonData.taxDetails[1].includedInd).eql(request.data.taxes[1].isInclusive);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"feeInd flag match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //loop through feeTypeInfoMap static data and identify the taxtype\r",
							"    for(let i=0; i< feeTypeInfoDB.length; i++){\r",
							"        if(feeTypeInfoDB[i].acrs == request.data.taxes[0].taxType){\r",
							"            pm.expect(jsonData.taxDetails[0].feeInd+\"\").eql(feeTypeInfoDB[i].mmf);\r",
							"            console.log(\"Found fee type  \"+JSON.stringify(feeTypeInfoDB[i]));\r",
							"        }\r",
							"        if(feeTypeInfoDB[i].acrs == request.data.taxes[1].taxType){\r",
							"            pm.expect(jsonData.taxDetails[1].feeInd+\"\").eql(feeTypeInfoDB[i].mmf);\r",
							"            console.log(\"Found fee type  \"+JSON.stringify(feeTypeInfoDB[i]));\r",
							"        }\r",
							"\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Tax name match and id present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].name).eql(request.data.taxes[0].name);\r",
							"    pm.expect(jsonData.taxDetails[0].id).is.eql(\"TAX001\");\r",
							"    pm.expect(jsonData.taxDetails[1].name).eql(request.data.taxes[1].name);\r",
							"    pm.expect(jsonData.taxDetails[1].id).is.eql(\"TAX002\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Number of longDescription match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].longDescription[0].text[0]).eql(request.data.taxes[0].longDescription);\r",
							"    pm.expect(jsonData.taxDetails[1].longDescription[0].text[0]).eql(request.data.taxes[1].longDescription);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Tax paymentAtHotelStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].paymentAtHotelStatusEnum).eql(request.data.taxes[0].paymentAtHotelStatus);\r",
							"    pm.expect(jsonData.taxDetails[1].paymentAtHotelStatusEnum).eql(request.data.taxes[1].paymentAtHotelStatus);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Tax ActivationStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].activationStatusEnum).eql(request.data.taxes[0].activationStatus);\r",
							"    pm.expect(jsonData.taxDetails[1].activationStatusEnum).eql(request.data.taxes[1].activationStatus);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"// pm.test(\"Tax ChargeFrequency match\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.taxDetails[0].chargeFrequencyEnum).eql(request.data.taxes[0].chargeFrequency);\r",
							"// });\r",
							"\r",
							"pm.test(\"Tax computationType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationTypeEnum).eql(request.data.taxes[0].computationType);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax computationMode match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationModeEnum).eql(request.data.taxes[0].computationMode);\r",
							"    pm.expect(jsonData.taxDetails[1].computationModeEnum).eql(request.data.taxes[1].computationMode);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Residency Status match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].residencyEnum).eql(request.data.taxes[0].residencyStatus);\r",
							"    pm.expect(jsonData.taxDetails[1].residencyEnum).eql(request.data.taxes[1].residencyStatus);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Tax relatedTaxCodes match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].relatedTaxCodes.length).eql(request.data.taxes[0].relatedTaxCodes.length);\r",
							"    pm.expect(jsonData.taxDetails[1].relatedTaxCodes.length).eql(request.data.taxes[1].relatedTaxCodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of Periods  match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods.length).eql(request.data.taxes[0].periods.length);\r",
							"    pm.expect(jsonData.taxDetails[1].periods.length).eql(request.data.taxes[1].periods.length);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Start Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.start).eql(request.data.taxes[0].periods[0].startDate);\r",
							"    pm.expect(jsonData.taxDetails[1].periods[0].timespan.start).eql(request.data.taxes[1].periods[0].startDate);    \r",
							"});\r",
							"\r",
							"pm.test(\"Tax End Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.end).eql(request.data.taxes[0].periods[0].endDate);\r",
							"    pm.expect(jsonData.taxDetails[1].periods[0].timespan.end).eql(request.data.taxes[1].periods[0].endDate);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"ActiveDow match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const requestDOW = request.data.taxes[0].periods[0].activeDow;\r",
							"    for (const property in requestDOW) {\r",
							"         if(requestDOW[property]){\r",
							"             //Check if this particular DOW is present in response body\r",
							"             const indexNum = jsonData.taxDetails[0].periods[0].dowEnum.findIndex( item => item.toLowerCase()) === (property.toLowerCase());\r",
							"             pm.expect(indexNum).not.eql(-1);\r",
							"         }\r",
							"\r",
							"    }\r",
							"    console.log(jsonData.taxDetails[0].periods[0].dowEnum.length);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].dowEnum.length).eql(6);\r",
							"     pm.expect(jsonData.taxDetails[1].periods[0].dowEnum.length).eql(5);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of ratePeriods match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"    pm.expect(jsonData.taxDetails[1].periods[0].values.length).eql(request.data.taxes[1].periods[0].ratePeriods.length);    \r",
							"});\r",
							"\r",
							"pm.test(\"RatePeriod details match\", function () {\r",
							"    var respJson = pm.response.json();\r",
							"    /*To compare flatAmount field of ACRS request - \r",
							"        1) Check if '.' is present (decimal point).\r",
							"        2) Split the string at decimal point.\r",
							"    */\r",
							"    const respAmtValue = request.data.taxes[0].periods[0].ratePeriods[0].flatAmount;\r",
							"    const numSplitArr = respAmtValue.split(\".\");\r",
							"    pm.expect(numSplitArr.length).to.be.at.most(2); //number & fraction\r",
							"    //check if fraction part is present\r",
							"    let tmpNumConcat=\"\";\r",
							"    tmpNumConcat+=numSplitArr[0];\r",
							"    if(numSplitArr.length === 2){\r",
							"        const fraction = numSplitArr[1];\r",
							"        console.log(fraction);\r",
							"             pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.numberOfDecimals).eql(fraction.length);\r",
							"        tmpNumConcat+=fraction;\r",
							"    }\r",
							"    console.log(tmpNumConcat);\r",
							"     pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.value).eql(parseInt(tmpNumConcat));\r",
							"\r",
							"     //Convert MMF string percentValue to Double to compare with ACRS value\r",
							"     const respPercentVal = parseFloat(respJson.taxDetails[0].periods[0].values[0].percentValue);\r",
							"     pm.expect(respPercentVal).eql(request.data.taxes[0].periods[0].ratePeriods[0].percentage);\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"\r",
							"    //Validate pricerange\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].price.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"    //Validate pricerange.min and max\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].price[0].min).eql(request.data.taxes[0].periods[0].ratePeriods[0].priceRange[0].min);\r",
							"     pm.expect(respJson.taxDetails[0].periods[0].values[0].price[0].max).eql(request.data.taxes[0].periods[0].ratePeriods[0].priceRange[0].max);\r",
							"\r",
							"    //Validate age\r",
							"    pm.expect(parseInt(respJson.taxDetails[0].periods[0].values[0].age.min)).eql(request.data.taxes[0].periods[0].ratePeriods[0].age.min);\r",
							"     pm.expect(parseInt(respJson.taxDetails[0].periods[0].values[0].age.max)).eql(request.data.taxes[0].periods[0].ratePeriods[0].age.max);\r",
							"});\r",
							"\r",
							"pm.test(\"type of guest match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values[0].guestTypes[0].length).eql(request.data.taxes[0].periods[0].ratePeriods[0].guestTypes[0].length);\r",
							"    pm.expect(jsonData.taxDetails[1].periods[0].values[0].guestTypes[0].length).eql(request.data.taxes[1].periods[0].ratePeriods[0].guestTypes[0].length);    \r",
							"});\r",
							"\r",
							"pm.test(\"Product Category match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].productCategory).eql(request.data.taxes[0].productCategories[0].productCategoryCode);\r",
							"    pm.expect(jsonData.taxDetails[1].items[0].productCategory).eql(request.data.taxes[1].productCategories[0].productCategoryCode);    \r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codeType).eql(request.data.taxes[0].productCategories[0].codeType);\r",
							"    pm.expect(jsonData.taxDetails[1].items[0].codeType).eql(request.data.taxes[1].productCategories[0].codeType);    \r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codes[0].length).eql(request.data.taxes[0].productCategories[0].productCodes[0].length);\r",
							"    pm.expect(jsonData.taxDetails[1].items[0].codes[0].length).eql(request.data.taxes[1].productCategories[0].productCodes[0].length);    \r",
							"});"
						],
						"type": "text/javascript",
						"id": "0768a709-f320-4289-822b-831b359c2cee"
					}
				}
			],
			"id": "326309fd-f174-45cc-9757-946abe8aa51c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ama-Api-Version",
						"value": "1",
						"type": "default"
					},
					{
						"key": "Ama-Request-Id",
						"value": "1234",
						"type": "default"
					},
					{
						"key": "Ama-RequestCorrelation-Id",
						"value": "A1234",
						"type": "default"
					},
					{
						"key": "Ama-Correlation-Id",
						"value": "ABC12345",
						"type": "default"
					},
					{
						"key": "Ama-Retry-Count",
						"value": "0",
						"type": "default"
					},
					{
						"key": "Ama-Sequence-Id",
						"value": "1",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meta\": {\r\n    \"generationTime\": \"2023-05-19T05:33:28.085Z\",\r\n    \"chainCode\": \"MI\",\r\n    \"propertyCode\": \"NYCMQ\"\r\n  },\r\n  \"data\": {\r\n    \"taxes\": [\r\n      {\r\n        \"taxType\": 18,\r\n        \"isInclusive\": true,\r\n        \"name\": \"City Tourism tax\",\r\n        \"description\": \"some descritpion\",\r\n        \"longDescription\": \"some long description\",\r\n        \"taxUserCode\": \"AN001\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2023-06-19\",\r\n            \"endDate\": \"2023-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": true,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"100.55\",\r\n                \"percentage\": 0,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.00\",\r\n                    \"max\": \"50.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 18,\r\n                  \"max\": 60\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE\"\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n       {\r\n        \"taxType\": 17,\r\n        \"isInclusive\": true,\r\n        \"name\": \"Total tax\",\r\n        \"description\": \"some description for 17\",\r\n        \"longDescription\": \"some long description for 17\",\r\n        \"taxUserCode\": \"AN002\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2024-06-19\",\r\n            \"endDate\": \"2024-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": false,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"101.55\",\r\n                \"percentage\": 10,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.11\",\r\n                    \"max\": \"50.11\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\",\"Children\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 19,\r\n                  \"max\": 61\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE1\"\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"action\": \"Update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ATAX_URL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "Tax- Multiple RatePeriods",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var request = JSON.parse(pm.request.body.raw);\r",
							"let testVarStr = pm.collectionVariables.get(\"feeTypeInfoMappingVar\");\r",
							"const feeTypeInfoDB = JSON.parse(testVarStr).codes;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Action match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.action).eql(request.data.actionEnum);\r",
							"});\r",
							"\r",
							"pm.test(\"Property Chain code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyChain.code).eql(request.meta.chainCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Property code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyCode.code).eql(request.meta.propertyCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax length match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails.length).eql(request.data.taxes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax includedInd match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].includedInd).eql(request.data.taxes[0].isInclusive);\r",
							"});\r",
							"\r",
							"pm.test(\"feeInd flag match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //loop through feeTypeInfoMap static data and identify the taxtype\r",
							"    for(let i=0; i< feeTypeInfoDB.length; i++){\r",
							"        if(feeTypeInfoDB[i].acrs == request.data.taxes[0].taxType){\r",
							"            pm.expect(jsonData.taxDetails[0].feeInd+\"\").eql(feeTypeInfoDB[i].mmf);\r",
							"            console.log(\"Found fee type  \"+JSON.stringify(feeTypeInfoDB[i]));\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Tax name match and id present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].name).eql(request.data.taxes[0].name);\r",
							"    pm.expect(jsonData.taxDetails[0].id).is.eql(\"TAX001\");\r",
							"});\r",
							"\r",
							"pm.test(\"Number of taxDetails match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].length).eql(request.data.taxes[0].length);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of longDescription match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].longDescription[0].text[0].length).eql(request.data.taxes[0].longDescription.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax paymentAtHotelStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].paymentAtHotelStatusEnum).eql(request.data.taxes[0].paymentAtHotelStatus);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Tax ActivationStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].activationStatusEnum).eql(request.data.taxes[0].activationStatus);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax ChargeFrequency match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    if(request.data.taxes[0].chargeFrequency === 'PerDay'){\r",
							"        pm.expect(jsonData.taxDetails[0].chargeFrequencyEnum).eql(\"Daily\");\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Tax computationType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationTypeEnum).eql(request.data.taxes[0].computationType);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax computationMode match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationModeEnum).eql(request.data.taxes[0].computationMode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Resedency Status match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].residencyEnum).eql(request.data.taxes[0].residencyStatus);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax relatedTaxCodes match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].relatedTaxCodes.length).eql(request.data.taxes[0].relatedTaxCodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of Periods  match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods.length).eql(request.data.taxes[0].periods.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Start Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.start).eql(request.data.taxes[0].periods[0].startDate);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[1].timespan.start).eql(request.data.taxes[0].periods[1].startDate);    \r",
							"});\r",
							"\r",
							"pm.test(\"Tax End Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.end).eql(request.data.taxes[0].periods[0].endDate);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[1].timespan.end).eql(request.data.taxes[0].periods[1].endDate);\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"ActiveDow match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    for(let i=0;i<request.data.taxes[0].periods.length;i++){\r",
							"        const requestDOW = request.data.taxes[0].periods[i].activeDow;\r",
							"        for (const property in requestDOW) {\r",
							"            if(requestDOW[property]){\r",
							"                console.log(`${property}: ${requestDOW[property]}`);\r",
							"                //Check if this particular DOW is present in response body\r",
							"                const indexNum = jsonData.taxDetails[0].periods[i].dowEnum.findIndex( item => item.toLowerCase()) === (property.toLowerCase());\r",
							"                pm.expect(indexNum).not.eql(-1);\r",
							"            }\r",
							"\r",
							"        }\r",
							"    }\r",
							"    \r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].dowEnum.length).eql(6);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[1].dowEnum.length).eql(5);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of ratePeriods match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"        pm.expect(jsonData.taxDetails[0].periods[1].values.length).eql(request.data.taxes[0].periods[1].ratePeriods.length);\r",
							"});\r",
							"\r",
							"pm.test(\"RatePeriod details match\", function () {\r",
							"    var respJson = pm.response.json();\r",
							"    /*To comapare flatAmount fied of ACRS request - \r",
							"        1) Check if '.' is present (decimal point).\r",
							"        2) Split the string at decimal point.\r",
							"    */\r",
							"    for(let i=0;i<request.data.taxes[0].periods.length;i++){\r",
							"\r",
							"        const respAmtValue = request.data.taxes[0].periods[i].ratePeriods[0].flatAmount;\r",
							"        const numSplitArr = respAmtValue.split(\".\");\r",
							"        pm.expect(numSplitArr.length).to.be.at.most(2); //number & fraction\r",
							"        //check if fraction part is present\r",
							"        let tmpNumConcat=\"\";\r",
							"        tmpNumConcat+=numSplitArr[0];\r",
							"        if(numSplitArr.length === 2){\r",
							"            const fraction = numSplitArr[1];\r",
							"            console.log(fraction);\r",
							"                pm.expect(respJson.taxDetails[0].periods[i].values[0].amountValue.numberOfDecimals).eql(fraction.length);\r",
							"            tmpNumConcat+=fraction;\r",
							"        }\r",
							"        console.log(tmpNumConcat);\r",
							"        pm.expect(respJson.taxDetails[0].periods[i].values[0].amountValue.value).eql(parseInt(tmpNumConcat));\r",
							"\r",
							"        pm.expect(respJson.taxDetails[0].periods[i].values.length).eql(request.data.taxes[0].periods[i].ratePeriods.length);\r",
							"\r",
							"     //Convert MMF string percentValue to Double to compare with ACRS value\r",
							"        const respPercentVal = parseFloat(respJson.taxDetails[0].periods[i].values[0].percentValue);\r",
							"        pm.expect(respPercentVal).eql(request.data.taxes[0].periods[i].ratePeriods[0].percentage);  \r",
							"         //Validate pricerange\r",
							"        pm.expect(respJson.taxDetails[0].periods[i].values[0].price.length).eql(request.data.taxes[0].periods[i].ratePeriods.length);   \r",
							"         //Validate pricerange.min and max\r",
							"        pm.expect(respJson.taxDetails[0].periods[i].values[0].price[0].min).eql(request.data.taxes[0].periods[i].ratePeriods[0].priceRange[0].min);\r",
							"        pm.expect(respJson.taxDetails[0].periods[i].values[0].price[0].max).eql(request.data.taxes[0].periods[i].ratePeriods[0].priceRange[0].max);   \r",
							"        //Validate age\r",
							"        pm.expect(parseInt(respJson.taxDetails[0].periods[i].values[0].age.min)).eql(request.data.taxes[0].periods[i].ratePeriods[0].age.min);\r",
							"        pm.expect(parseInt(respJson.taxDetails[0].periods[i].values[0].age.max)).eql(request.data.taxes[0].periods[i].ratePeriods[0].age.max);        \r",
							"    }\r",
							" \r",
							"});\r",
							"\r",
							"pm.test(\"type of guest match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values[0].guestTypes[0].length).eql(request.data.taxes[0].periods[0].ratePeriods[0].guestTypes[0].length);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[1].values[0].guestTypes[0].length).eql(request.data.taxes[0].periods[1].ratePeriods[0].guestTypes[0].length);\r",
							"});\r",
							"\r",
							"pm.test(\"Product Category match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].productCategory).eql(request.data.taxes[0].productCategories[0].productCategoryCode);    \r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codeType).eql(request.data.taxes[0].productCategories[0].codeType);\r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codes[0].length).eql(request.data.taxes[0].productCategories[0].productCodes[0].length);\r",
							"});"
						],
						"type": "text/javascript",
						"id": "00daa5ff-2d24-4e12-bad7-e7faacd9b966"
					}
				}
			],
			"id": "fade3f77-bc2b-4d7e-b2b3-494488c1f0cd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ama-Api-Version",
						"value": "1",
						"type": "default"
					},
					{
						"key": "Ama-Request-Id",
						"value": "1234",
						"type": "default"
					},
					{
						"key": "Ama-RequestCorrelation-Id",
						"value": "A1234",
						"type": "default"
					},
					{
						"key": "Ama-Correlation-Id",
						"value": "ABC12345",
						"type": "default"
					},
					{
						"key": "Ama-Retry-Count",
						"value": "0",
						"type": "default"
					},
					{
						"key": "Ama-Sequence-Id",
						"value": "1",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meta\": {\r\n    \"generationTime\": \"2023-05-19T05:33:28.085Z\",\r\n    \"chainCode\": \"MI\",\r\n    \"propertyCode\": \"NYCMQ\"\r\n  },\r\n  \"data\": {\r\n    \"taxes\": [\r\n      {\r\n        \"taxType\": 18,\r\n        \"isInclusive\": true,\r\n        \"name\": \"City Tourism tax\",\r\n        \"description\": \"some descritpion\",\r\n        \"longDescription\": \"some long description\",\r\n        \"taxUserCode\": \"AN001\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2023-06-19\",\r\n            \"endDate\": \"2023-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": true,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"100.55\",\r\n                \"percentage\": 0,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.00\",\r\n                    \"max\": \"50.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 18,\r\n                  \"max\": 60\r\n                }\r\n              }\r\n            ]\r\n          },\r\n           {\r\n            \"startDate\": \"2024-06-19\",\r\n            \"endDate\": \"2024-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": false,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"111.55\",\r\n                \"percentage\": 1,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"11.00\",\r\n                    \"max\": \"51.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 16,\r\n                  \"max\": 58\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE1\"\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"action\": \"Update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ATAX_URL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "Tax- Multiple ProductCategories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var request = JSON.parse(pm.request.body.raw);\r",
							"let testVarStr = pm.collectionVariables.get(\"feeTypeInfoMappingVar\");\r",
							"const feeTypeInfoDB = JSON.parse(testVarStr).codes;\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Action match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.action).eql(request.data.actionEnum);\r",
							"});\r",
							"\r",
							"pm.test(\"Property Chain code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyChain.code).eql(request.meta.chainCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Property code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.propertyCode.code).eql(request.meta.propertyCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax length match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails.length).eql(request.data.taxes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax includedInd match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].includedInd).eql(request.data.taxes[0].isInclusive);\r",
							"});\r",
							"\r",
							"pm.test(\"feeInd flag match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //loop through feeTypeInfoMap static data and identify the taxtype\r",
							"    for(let i=0; i< feeTypeInfoDB.length; i++){\r",
							"        if(feeTypeInfoDB[i].acrs == request.data.taxes[0].taxType){\r",
							"            pm.expect(jsonData.taxDetails[0].feeInd+\"\").eql(feeTypeInfoDB[i].mmf);\r",
							"            console.log(\"Found fee type  \"+JSON.stringify(feeTypeInfoDB[i]));\r",
							"            break;\r",
							"        }\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Tax name match and id present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].name).eql(request.data.taxes[0].name);\r",
							"    pm.expect(jsonData.taxDetails[0].id).is.eql(\"TAX001\");\r",
							"});\r",
							"\r",
							"pm.test(\"Number of taxDetails match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].length).eql(request.data.taxes[0].length);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of longDescription match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].longDescription[0].text[0].length).eql(request.data.taxes[0].longDescription.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax paymentAtHotelStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].paymentAtHotelStatusEnum).eql(request.data.taxes[0].paymentAtHotelStatus);\r",
							"});\r",
							"\r",
							"// pm.test(\"Tax Currency match\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.taxDetails[0].currency).eql(request.data.taxes[0].currency);\r",
							"// });\r",
							"\r",
							"pm.test(\"Tax ActivationStatus match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].activationStatusEnum).eql(request.data.taxes[0].activationStatus);\r",
							"});\r",
							"\r",
							"// pm.test(\"Tax ChargeFrequency match\", function () {\r",
							"//     var jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.taxDetails[0].chargeFrequencyEnum).eql(request.data.taxes[0].chargeFrequency);\r",
							"// });\r",
							"\r",
							"pm.test(\"Tax computationType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationTypeEnum).eql(request.data.taxes[0].computationType);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax computationMode match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].computationModeEnum).eql(request.data.taxes[0].computationMode);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Resedency Status match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].residencyEnum).eql(request.data.taxes[0].residencyStatus);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax relatedTaxCodes match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].relatedTaxCodes.length).eql(request.data.taxes[0].relatedTaxCodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of Periods  match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods.length).eql(request.data.taxes[0].periods.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax Start Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.start).eql(request.data.taxes[0].periods[0].startDate);\r",
							"});\r",
							"\r",
							"pm.test(\"Tax End Date match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].timespan.end).eql(request.data.taxes[0].periods[0].endDate);\r",
							"});\r",
							"\r",
							"pm.test(\"ActiveDow match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    const requestDOW = request.data.taxes[0].periods[0].activeDow;\r",
							"    for (const property in requestDOW) {\r",
							"         if(requestDOW[property]){\r",
							"            console.log(`${property}: ${requestDOW[property]}`);\r",
							"             //Check if this particular DOW is present in response body\r",
							"             const indexNum = jsonData.taxDetails[0].periods[0].dowEnum.findIndex( item => item.toLowerCase()) === (property.toLowerCase());\r",
							"             pm.expect(indexNum).not.eql(-1);\r",
							"         }\r",
							"\r",
							"    }\r",
							"    console.log(jsonData.taxDetails[0].periods[0].dowEnum.length);\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].dowEnum.length).eql(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Number of ratePeriods match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"});\r",
							"\r",
							"pm.test(\"RatePeriod details match\", function () {\r",
							"    var respJson = pm.response.json();\r",
							"    /*To comapare flatAmount fied of ACRS request - \r",
							"        1) Check if '.' is present (decimal point).\r",
							"        2) Split the string at decimal point.\r",
							"    */\r",
							"    const respAmtValue = request.data.taxes[0].periods[0].ratePeriods[0].flatAmount;\r",
							"    const numSplitArr = respAmtValue.split(\".\");\r",
							"    pm.expect(numSplitArr.length).to.be.at.most(2); //number & fraction\r",
							"    //check if fraction part is present\r",
							"    let tmpNumConcat=\"\";\r",
							"    tmpNumConcat+=numSplitArr[0];\r",
							"    if(numSplitArr.length === 2){\r",
							"        const fraction = numSplitArr[1];\r",
							"        console.log(fraction);\r",
							"             pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.numberOfDecimals).eql(fraction.length);\r",
							"        tmpNumConcat+=fraction;\r",
							"    }\r",
							"    console.log(tmpNumConcat);\r",
							"     pm.expect(respJson.taxDetails[0].periods[0].values[0].amountValue.value).eql(parseInt(tmpNumConcat));\r",
							"\r",
							"     //Convert MMF string percentValue to Double to compare with ACRS value\r",
							"     const respPercentVal = parseFloat(respJson.taxDetails[0].periods[0].values[0].percentValue);\r",
							"     pm.expect(respPercentVal).eql(request.data.taxes[0].periods[0].ratePeriods[0].percentage);\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"\r",
							"    //Validate pricerange\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].price.length).eql(request.data.taxes[0].periods[0].ratePeriods.length);\r",
							"    //Validate pricerange.min and max\r",
							"    pm.expect(respJson.taxDetails[0].periods[0].values[0].price[0].min).eql(request.data.taxes[0].periods[0].ratePeriods[0].priceRange[0].min);\r",
							"     pm.expect(respJson.taxDetails[0].periods[0].values[0].price[0].max).eql(request.data.taxes[0].periods[0].ratePeriods[0].priceRange[0].max);\r",
							"\r",
							"    //Validate age\r",
							"    pm.expect(parseInt(respJson.taxDetails[0].periods[0].values[0].age.min)).eql(request.data.taxes[0].periods[0].ratePeriods[0].age.min);\r",
							"     pm.expect(parseInt(respJson.taxDetails[0].periods[0].values[0].age.max)).eql(request.data.taxes[0].periods[0].ratePeriods[0].age.max);\r",
							"});\r",
							"\r",
							"pm.test(\"type of guest match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].periods[0].values[0].guestTypes[0].length).eql(request.data.taxes[0].periods[0].ratePeriods[0].guestTypes[0].length);\r",
							"});\r",
							"\r",
							"pm.test(\"Product Category match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items.length).eql(request.data.taxes[0].productCategories.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Product Category code match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].productCategory).eql(request.data.taxes[0].productCategories[0].productCategoryCode);\r",
							"     pm.expect(jsonData.taxDetails[0].items[1].productCategory).eql(request.data.taxes[0].productCategories[1].productCategoryCode);\r",
							"});\r",
							"\r",
							"pm.test(\"Product CodeType match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codeType).eql(request.data.taxes[0].productCategories[0].codeType);\r",
							"       pm.expect(jsonData.taxDetails[0].items[1].codeType).eql(request.data.taxes[0].productCategories[1].codeType);\r",
							"});\r",
							"\r",
							"pm.test(\"Product codes length match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codes.length).eql(request.data.taxes[0].productCategories[0].productCodes.length);\r",
							"    pm.expect(jsonData.taxDetails[0].items[1].codes.length).eql(request.data.taxes[0].productCategories[1].productCodes.length);\r",
							"});\r",
							"\r",
							"pm.test(\"Product codes match\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.taxDetails[0].items[0].codes.toString()).eql(request.data.taxes[0].productCategories[0].productCodes.toString());\r",
							"    pm.expect(jsonData.taxDetails[0].items[1].codes.toString()).eql(request.data.taxes[0].productCategories[1].productCodes.toString());\r",
							"});"
						],
						"type": "text/javascript",
						"id": "02186934-b989-43fa-950d-1593e06ce409"
					}
				}
			],
			"id": "490e9a12-42bd-4cbf-9aab-76d258f2f3eb",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ama-Api-Version",
						"value": "1",
						"type": "default"
					},
					{
						"key": "Ama-Request-Id",
						"value": "1234",
						"type": "default"
					},
					{
						"key": "Ama-RequestCorrelation-Id",
						"value": "A1234",
						"type": "default"
					},
					{
						"key": "Ama-Correlation-Id",
						"value": "ABC12345",
						"type": "default"
					},
					{
						"key": "Ama-Retry-Count",
						"value": "0",
						"type": "default"
					},
					{
						"key": "Ama-Sequence-Id",
						"value": "1",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meta\": {\r\n    \"generationTime\": \"2023-05-19T05:33:28.085Z\",\r\n    \"chainCode\": \"MI\",\r\n    \"propertyCode\": \"NYCMQ\"\r\n  },\r\n  \"data\": {\r\n    \"taxes\": [\r\n      {\r\n        \"taxType\": 18,\r\n        \"isInclusive\": true,\r\n        \"name\": \"City Tourism tax\",\r\n        \"description\": \"some descritpion\",\r\n        \"longDescription\": \"some long description\",\r\n        \"taxUserCode\": \"AN001\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2023-06-19\",\r\n            \"endDate\": \"2023-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": true,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"100.55\",\r\n                \"percentage\": 0,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.00\",\r\n                    \"max\": \"50.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 18,\r\n                  \"max\": 60\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE\"\r\n            ]\r\n          },\r\n           {\r\n            \"productCategoryCode\": \"NR\",\r\n            \"codeType\": \"NonRoom\",\r\n            \"productCodes\": [\r\n              \"NR_PROD_CODE\",\"NR_PROD_CODE1\"\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"action\": \"Update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ATAX_URL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "Invalid Request - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error length test\", function () {\r",
							"    pm.expect(pm.response.json().errors.length).eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message test\", function () {\r",
							"    const respJson = pm.response.json();\r",
							"    pm.expect(respJson.errors[0].status).eql(400);\r",
							"    pm.expect(respJson.errors[0].source.pointer).eql(\"meta.propertyCode\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "a12f320e-4d5d-4f68-9814-e743bd73e378"
					}
				}
			],
			"id": "96b91551-adc9-4da0-976e-2246ee30a92b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ama-Api-Version",
						"value": "1",
						"type": "default"
					},
					{
						"key": "Ama-Request-Id",
						"value": "1234",
						"type": "default"
					},
					{
						"key": "Ama-RequestCorrelation-Id",
						"value": "A1234",
						"type": "default"
					},
					{
						"key": "Ama-Correlation-Id",
						"value": "ABC12345",
						"type": "default"
					},
					{
						"key": "Ama-Retry-Count",
						"value": "0",
						"type": "default"
					},
					{
						"key": "Ama-Sequence-Id",
						"value": "1",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meta\": {\r\n    \"generationTime\": \"2023-05-19T05:33:28.085Z\",\r\n    \"chainCode\": \"MI\",\r\n    \"propertyCode\": \"\"\r\n  },\r\n  \"data\": {\r\n    \"taxes\": [\r\n      {\r\n        \"taxType\": 18,\r\n        \"isInclusive\": true,\r\n        \"name\": \"City Tourism tax\",\r\n        \"description\": \"some descritpion\",\r\n        \"longDescription\": \"some long description\",\r\n        \"taxUserCode\": \"AN001\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2023-06-19\",\r\n            \"endDate\": \"2023-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": true,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"100.55\",\r\n                \"percentage\": 0,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.00\",\r\n                    \"max\": \"50.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 18,\r\n                  \"max\": 60\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE\"\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"action\": \"Update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ATAX_URL}}{{endpoint}}"
			},
			"response": []
		},
		{
			"name": "Invalid Endpoint - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"id": "8f64663f-eda8-48e4-acc7-cfd49b36c125"
					}
				}
			],
			"id": "b92ccfbd-ad12-4989-89bb-47497555d8c5",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Ama-Api-Version",
						"value": "1",
						"type": "default"
					},
					{
						"key": "Ama-Request-Id",
						"value": "1234",
						"type": "default"
					},
					{
						"key": "Ama-RequestCorrelation-Id",
						"value": "A1234",
						"type": "default"
					},
					{
						"key": "Ama-Correlation-Id",
						"value": "ABC12345",
						"type": "default"
					},
					{
						"key": "Ama-Retry-Count",
						"value": "0",
						"type": "default"
					},
					{
						"key": "Ama-Sequence-Id",
						"value": "1",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"meta\": {\r\n    \"generationTime\": \"2023-05-19T05:33:28.085Z\",\r\n    \"chainCode\": \"MI\",\r\n    \"propertyCode\": \"\"\r\n  },\r\n  \"data\": {\r\n    \"taxes\": [\r\n      {\r\n        \"taxType\": 18,\r\n        \"isInclusive\": true,\r\n        \"name\": \"City Tourism tax\",\r\n        \"description\": \"some descritpion\",\r\n        \"longDescription\": \"some long description\",\r\n        \"taxUserCode\": \"AN001\",\r\n        \"paymentAtHotelStatus\": \"OnlinePayment\",\r\n        \"currency\": \"USD\",\r\n        \"activationStatus\": \"Active\",\r\n        \"chargeFrequency\": \"PerDay\",\r\n        \"computationType\": \"Percentage\",\r\n        \"computationMode\": \"TaxesOnly\",\r\n        \"chargePerPerson\": true,\r\n        \"residencyStatus\": \"All\",\r\n        \"relatedTaxCodes\": [\r\n          \"DDD111\"\r\n        ],\r\n        \"periods\": [\r\n          {\r\n            \"startDate\": \"2023-06-19\",\r\n            \"endDate\": \"2023-06-20\",\r\n            \"activeDow\": {\r\n              \"monday\": true,\r\n              \"tuesday\": true,\r\n              \"wednesday\": true,\r\n              \"thursday\": true,\r\n              \"friday\": true,\r\n              \"saturday\": true,\r\n              \"sunday\": false\r\n            },\r\n            \"ratePeriods\": [\r\n              {\r\n                \"flatAmount\": \"100.55\",\r\n                \"percentage\": 0,\r\n                \"priceRange\": [\r\n                  {\r\n                    \"min\": \"10.00\",\r\n                    \"max\": \"50.00\"\r\n                  }\r\n                ],\r\n                \"guestTypes\": [\r\n                  \"Adult\"\r\n                ],\r\n                \"age\": {\r\n                  \"min\": 18,\r\n                  \"max\": 60\r\n                }\r\n              }\r\n            ]\r\n          }\r\n        ],\r\n        \"productCategories\": [\r\n          {\r\n            \"productCategoryCode\": \"SR\",\r\n            \"codeType\": \"Room\",\r\n            \"productCodes\": [\r\n              \"SR_PROD_CODE\"\r\n            ]\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"action\": \"Update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{ATAX_URL}}{{endpoint}}/test"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "dc36e80d-1d5f-40d0-a56a-5efc64c1d5c2"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "a2ca61e0-3f21-48ab-a112-74bac4aa5868"
			}
		}
	],
	"variable": [
		{
			"key": "endpoint",
			"value": "/v1/tax/sync",
			"type": "string"
		},
		{
			"key": "feeTypeInfoMappingVar",
			"value": "{\n  \"_id\": \"FEE_TYPE_INFO_MAPPING\",\n  \"type\": \"translation-data\",\n  \"lastUpdatedTime\": \"2023-09-22T19:42:00-000Z\",\n  \"lastUpdatedUser\": \"TEST123\",\n  \"createdTime\": \"2023-02-14T15:42:00-000Z\",\n  \"createdUser\": \"DB-User\",\n  \"codes\": [\n    {\n      \"acrs\": \"1\",\n      \"marsha\": \"1.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"2\",\n      \"marsha\": \"2.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"3\",\n      \"marsha\": \"3.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"4\",\n      \"marsha\": \"4.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"5\",\n      \"marsha\": \"5.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"6\",\n      \"marsha\": \"6.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"7\",\n      \"marsha\": \"7.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"8\",\n      \"marsha\": \"8.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"9\",\n      \"marsha\": \"9.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"10\",\n      \"marsha\": \"10.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"11\",\n      \"marsha\": \"11.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"12\",\n      \"marsha\": \"12.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"13\",\n      \"marsha\": \"13.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"14\",\n      \"marsha\": \"14.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"15\",\n      \"marsha\": \"15.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"16\",\n      \"marsha\": \"16.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"17\",\n      \"marsha\": \"17.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"18\",\n      \"marsha\": \"18.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"20\",\n      \"marsha\": \"20.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"21\",\n      \"marsha\": \"21.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"22\",\n      \"marsha\": \"22.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"23\",\n      \"marsha\": \"23.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"24\",\n      \"marsha\": \"24.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"25\",\n      \"marsha\": \"25.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"27\",\n      \"marsha\": \"27.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"28\",\n      \"marsha\": \"28.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"29\",\n      \"marsha\": \"29.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"30\",\n      \"marsha\": \"30.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"31\",\n      \"marsha\": \"31.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"32\",\n      \"marsha\": \"32.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"33\",\n      \"marsha\": \"33.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"34\",\n      \"marsha\": \"34.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"35\",\n      \"marsha\": \"35.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"36\",\n      \"marsha\": \"36.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"37\",\n      \"marsha\": \"37.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"38\",\n      \"marsha\": \"38.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"39\",\n      \"marsha\": \"39.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"40\",\n      \"marsha\": \"40.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"41\",\n      \"marsha\": \"41.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"42\",\n      \"marsha\": \"42.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"43\",\n      \"marsha\": \"43.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"44\",\n      \"marsha\": \"44.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"45\",\n      \"marsha\": \"45.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"46\",\n      \"marsha\": \"46.FTT\",\n      \"mmf\": \"false\"\n    },\n    {\n      \"acrs\": \"47\",\n      \"marsha\": \"47.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"48\",\n      \"marsha\": \"48.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"49\",\n      \"marsha\": \"49.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"50\",\n      \"marsha\": \"50.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"51\",\n      \"marsha\": \"51.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"52\",\n      \"marsha\": \"52.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"53\",\n      \"marsha\": \"53.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"54\",\n      \"marsha\": \"54.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"55\",\n      \"marsha\": \"55.FTT\",\n      \"mmf\": \"true\"\n    },\n    {\n      \"acrs\": \"56\",\n      \"marsha\": \"56.FTT\",\n      \"mmf\": \"true\"\n    }\n  ]\n}",
			"type": "string"
		}
	]
}